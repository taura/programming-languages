#* Programming Languages (1)

<!--- md w --->

Enter your name and student ID.

 * Name:
 * Student ID:

<!--- end md --->

# Choose your language

Choose a language you want to work on for today from the following.

* Go --- designed as a "better C"
* Julia --- popular for scientific computing
* OCaml --- a practical functional language
* Rust --- a system programming language with memory safety without garbage collection


* Choose a language you want to learn instead of one you already know.
* The choice you made for today is not final, however; the language you work on in the rest of the course will be determined based on your preference as well as the balance.

Declare your choice in the following cell.  You can write any number of languages you actually worked on.  In this notebook, I will work on the following language(s).

<!--- md w points=1 --->
<!--- end md --->

# Prepare

* Find an authoritive documentation for the language you chose by Google (e.g., google with [_the language name_ documentation])
* I recommend you to find them by yourself, but in case you have a hard time finding it, here they are

* [Go:](https://go.dev/doc/)
* [Julia:](https://docs.julialang.org/en/v1/)
* [OCaml:](https://ocaml.org/manual/)
* Rust: [language manual](https://doc.rust-lang.org/book/) and [other docs](https://www.rust-lang.org/learn)

# Prepare AI Tutor

* Execute the following cell to set up your tutor
<!--- code kernel=python --->
from heytutor import hey,  I,  C,  R,  D, config
from heytutor import hey_, I_, C_, R_, D_

config(default_lang=".......")  # choose one of Go/Julia/OCaml/Rust
<!--- end code --->

# Roadmap

* In this notebook, you will learn most basic elements of virtually all programming languages
* You will find the following a useful recipe when learning a new programming language

# Defining functions

* Defining a function is probably the most basic yet most important tool for any programming language
* Consider using AI tutor to learn the basics and work on an exercise problem or two before the following

<!--- code w kernel=python --->
# uncomment the line you want to execute
# I("defining functions") # Introduction
# C("defining functions") # Coding problem
<!--- end code --->

#*P 

<!---
* In the language you chose, write a function `f` that takes a number $x$ and return $x + 1$. i.e.,

$$ f(x) = x + 1 $$
--->

* In the language you chose, write a function `f` that takes three floating point numbers $a$, $b$, and $c$ and return $a^2 + b^2 - c^2$. In a mathematical expression,

$$ f(a, b, c) = a^2 + b^2 - c^2 $$

* In languages supporting multiple types of floating point numbers, use 64 bit floating point numbers unless otherwise stated.

* <font color="red">In cells that follow, choose your language from the language selection menu.</font>

**解答セル/Answer Cell**
<!--- code w label=prob kernel=python points=1 --->
<!--- end code --->

<!--- md label=ans --->
Go
<!--- end md --->

<!--- code w label=ans kernel=go --->
<!--- exec-include ./mk_version.py -D label="A function" nb/source/pl01_basics/include/pl01.go --->
<!--- end code --->

<!--- md label=ans --->
Julia
<!--- end md --->

<!--- code w label=ans kernel=jl --->
<!--- exec-include ./mk_version.py -D label="A function" nb/source/pl01_basics/include/pl01.jl --->
<!--- end code --->

<!--- md label=ans --->
OCaml
<!--- end md --->

<!--- code w label=ans kernel=ml --->
<!--- exec-include ./mk_version.py -D label="A function" nb/source/pl01_basics/include/pl01.ml --->
<!--- end code --->

<!--- md label=ans --->
Rust
<!--- end md --->

<!--- code w label=ans kernel=rs --->
<!--- exec-include ./mk_version.py -D label="A function" nb/source/pl01_basics/include/pl01.rs --->
<!--- end code --->

and test your function by computing ${\tt f}(1, 1, 1)$, ${\tt f}(3, 4, 5)$, and ${\tt f}(2, 3, 4)$ which should be $1$, $0$, and $-3$, respectively

**解答セル/Answer Cell**

<!--- code w label=prob kernel=python points=1 --->
<!--- end code --->

<!--- md label=ans --->
Go
<!--- end md --->

<!--- code w label=ans kernel=go --->
<!--- exec-include ./mk_version.py -D label="Apply a function" nb/source/pl01_basics/include/pl01.go --->
<!--- end code --->

<!--- md label=ans --->
Julia
<!--- end md --->

<!--- code w label=ans kernel=jl --->
<!--- exec-include ./mk_version.py -D label="Apply a function" nb/source/pl01_basics/include/pl01.jl --->
<!--- end code --->

<!--- md label=ans --->
OCaml
<!--- end md --->

<!--- code w label=ans kernel=ml --->
<!--- exec-include ./mk_version.py -D label="Apply a function" nb/source/pl01_basics/include/pl01.ml --->
<!--- end code --->

<!--- md label=ans --->
Rust
<!--- end md --->

<!--- code w label=ans kernel=rs --->
<!--- exec-include ./mk_version.py -D label="Apply a function" nb/source/pl01_basics/include/pl01.rs --->
<!--- end code --->

# Conditional Expressions/Statements

* Consider using AI tutor

<!--- code w kernel=python --->
# uncomment the line you want to execute
# I("conditional expressions/statements") # Introduction
# C("conditional expressions/statements") # Coding problem
<!--- end code --->

#*P 

* In the language you chose, write a function `mk_triangle` (or `mkTriangle` depending on naming convention of your language) that takes three floating point numbers $a$, $b$, and $c$ satisfying $a \leq b \leq c$ and return 1 iff they make a triangle; that is, return 1 if $a + b - c$ is positive; otherwise return 0.

* <font color="red">Note:</font> Go and Julia uses so-called CamelCase convention (concatenate capitalized words without underscores, like calcSumOfNumbers) for function names whereas OCaml and Rust snake_case convention (concatenate lowercase words with underscores, like calc_sum_of_numbers).  Problems that follow specify function names like 'snake_case (or CamelCase)' just like the above without further explanation.

**解答セル/Answer Cell**

<!--- code w label=prob kernel=python points=1 --->
<!--- end code --->

<!--- md label=ans --->
Go
<!--- end md --->

<!--- code w label=ans kernel=go --->
<!--- exec-include ./mk_version.py -D label="Conditional" nb/source/pl01_basics/include/pl01.go --->
<!--- end code --->

<!--- md label=ans --->
Julia
<!--- end md --->

<!--- code w label=ans kernel=jl --->
<!--- exec-include ./mk_version.py -D label="Conditional" nb/source/pl01_basics/include/pl01.jl --->
<!--- end code --->

<!--- md label=ans --->
OCaml
<!--- end md --->

<!--- code w label=ans kernel=ml --->
<!--- exec-include ./mk_version.py -D label="Conditional" nb/source/pl01_basics/include/pl01.ml --->
<!--- end code --->

<!--- md label=ans --->
Rust
<!--- end md --->

<!--- code w label=ans kernel=rs --->
<!--- exec-include ./mk_version.py -D label="Conditional" nb/source/pl01_basics/include/pl01.rs --->
<!--- end code --->

and test your function by computing ${\tt mk\_triangle}(1, 1, 1)$, ${\tt mk\_triangle}(1, 2, 3)$, ${\tt mk\_triangle}(1, 2, 4)$, which should be $1$, $0$, and $0$, respectively

**解答セル/Answer Cell**

<!--- code w label=prob kernel=python points=1 --->
<!--- end code --->

<!--- md label=ans --->
Go
<!--- end md --->

<!--- code w label=ans kernel=go --->
<!--- exec-include ./mk_version.py -D label="Test conditional" nb/source/pl01_basics/include/pl01.go --->
<!--- end code --->

<!--- md label=ans --->
Julia
<!--- end md --->

<!--- code w label=ans kernel=jl --->
<!--- exec-include ./mk_version.py -D label="Test conditional" nb/source/pl01_basics/include/pl01.jl --->
<!--- end code --->

<!--- md label=ans --->
OCaml
<!--- end md --->

<!--- code w label=ans kernel=ml --->
<!--- exec-include ./mk_version.py -D label="Test conditional" nb/source/pl01_basics/include/pl01.ml --->
<!--- end code --->

<!--- md label=ans --->
Rust
<!--- end md --->

<!--- code w label=ans kernel=rs --->
<!--- exec-include ./mk_version.py -D label="Test conditional" nb/source/pl01_basics/include/pl01.rs --->
<!--- end code --->

# Variable Definitions

* A variable is a means to give a name to an intermediate result of potentially complex/expensive computation and use it for later computation
* Benefits of variables include:
  * you can avoid repeating the same expression in your program, thereby reducing programming errors
  * by using a variable name that expresses its meaning well, you can make the program easier to understand and maintain
  * you can avoid repeating the same computation at runtime, thereby reducing computation time

* Consider using AI tutor

<!--- code w kernel=python --->
# uncomment the line you want to execute
# I("variable definitions") # Introduction
# C("variable definitions") # Coding problem
<!--- end code --->

#*P 

* In the language you chose, write a function `triangle_type` that takes three floating point numbers $a$, $b$, and $c$ which you can assume satisfy $a \leq b \leq c$ and return $-2$, $-1$, $0$, or $1$ according to the following:
  * if three line segments of length $a$, $b$, and $c$ cannot form a triangle, `triangle_type(`$a$, $b$, $c$ `)` should be -2
  * if they form an obtuse triangle, it should be -1
  * if they form a right triangle, it should be 0
  * if they form an acute triangle, it should be 1
* Use a variable to avoid repeating $a^2 + b^2 - c^2$ in your program

**解答セル/Answer Cell**

<!--- code w label=prob kernel=python points=1 --->
<!--- end code --->

<!--- md label=ans --->
Go
<!--- end md --->

<!--- code w label=ans kernel=go --->
<!--- exec-include ./mk_version.py -D label="Triangle type" nb/source/pl01_basics/include/pl01.go --->
<!--- end code --->

<!--- md label=ans --->
Julia
<!--- end md --->

<!--- code w label=ans kernel=jl --->
<!--- exec-include ./mk_version.py -D label="Triangle type" nb/source/pl01_basics/include/pl01.jl --->
<!--- end code --->

<!--- md label=ans --->
OCaml
<!--- end md --->

<!--- code w label=ans kernel=ml --->
<!--- exec-include ./mk_version.py -D label="Triangle type" nb/source/pl01_basics/include/pl01.ml --->
<!--- end code --->

<!--- md label=ans --->
Rust
<!--- end md --->

<!--- code w label=ans kernel=rs --->
<!--- exec-include ./mk_version.py -D label="Triangle type" nb/source/pl01_basics/include/pl01.rs --->
<!--- end code --->

and test your function by computing ${\tt triangle\_type}(1, 1, 1)$, ${\tt triangle\_type}(3, 4, 5)$, ${\tt triangle\_type}(3, 4, 6)$, and ${\tt triangle\_type}(2, 3, 6)$, which should be $1$, $0$, $-1$, and $-2$, respectively

**解答セル/Answer Cell**

<!--- code w label=prob kernel=python points=1 --->
<!--- end code --->

<!--- md label=ans --->
Go
<!--- end md --->

<!--- code w label=ans kernel=go --->
<!--- exec-include ./mk_version.py -D label="Test triangle type" nb/source/pl01_basics/include/pl01.go --->
<!--- end code --->

<!--- md label=ans --->
Julia
<!--- end md --->

<!--- code w label=ans kernel=jl --->
<!--- exec-include ./mk_version.py -D label="Test triangle type" nb/source/pl01_basics/include/pl01.jl --->
<!--- end code --->

<!--- md label=ans --->
OCaml
<!--- end md --->

<!--- code w label=ans kernel=ml --->
<!--- exec-include ./mk_version.py -D label="Test triangle type" nb/source/pl01_basics/include/pl01.ml --->
<!--- end code --->

<!--- md label=ans --->
Rust
<!--- end md --->

<!--- code w label=ans kernel=rs --->
<!--- exec-include ./mk_version.py -D label="Test triangle type" nb/source/pl01_basics/include/pl01.rs --->
<!--- end code --->

# Recursive functions

* A recursive function is a function that calls itself
* If there is one thing that makes a programming language different from a calculator, it is a recursive function

<!--- code w kernel=python --->
# uncomment the line you want to execute
# I("recursive functions") # Introduction
# C("recursive functions") # Coding problem
<!--- end code --->

#*P 

* In the language you chose, write a function `gcd` that takes two integers $a$ and $b$ satisfying $a \leq b$ and returns the greatest common divisor (GCD) of the two
* Given two non-negative integers $a$ and $b$ satisfying $a \leq b$, their GCD is the maximum number that divides both $a$ and $b$
* It can be calculated by observing:
  * if $a = 0$, then GCD is $b$ (as any number divides 0; here, as a special case we conveniently define GCD of 0 and 0 as 0)
  * otherwise, GCD of $a$ and $b$ = GCD of $r$ and $a$, where $r$ equals the remainder when $b$ is divided by $a$
* In languages supporting multiple types of builtin integers, use 64 bit (64 bit in OCaml) integers

<!---
* Using a recursive definition of a function `fib` that takes an integer $n$ and return the $n$th fibonacci number $f_n$ defined as follows

$$ f_n = \left\{\begin{array}{ll} 1 & (n < 2) \\ f_{n-1} + f_{n-2} & (n \geq 2) \end{array} \right. $$

* Note: for the purpose of today, it suffices to write a straightforward recursive function; never mind the efficiency (time complexity) of the algorithm; you do not have to do use loops to make it linear time
--->

**解答セル/Answer Cell**
<!--- code w label=prob kernel=python points=1 --->
<!--- end code --->

<!--- md label=ans --->
Go
<!--- end md --->

<!--- code w label=ans kernel=go --->
<!--- exec-include ./mk_version.py -D label="GCD" nb/source/pl01_basics/include/pl01.go --->
<!--- end code --->

<!--- md label=ans --->
Julia
<!--- end md --->

<!--- code w label=ans kernel=jl --->
<!--- exec-include ./mk_version.py -D label="GCD" nb/source/pl01_basics/include/pl01.jl --->
<!--- end code --->

<!--- md label=ans --->
OCaml
<!--- end md --->

<!--- code w label=ans kernel=ml --->
<!--- exec-include ./mk_version.py -D label="GCD" nb/source/pl01_basics/include/pl01.ml --->
<!--- end code --->

<!--- md label=ans --->
Rust
<!--- end md --->

<!--- code w label=ans kernel=rs --->
<!--- exec-include ./mk_version.py -D label="GCD" nb/source/pl01_basics/include/pl01.rs --->
<!--- end code --->

and compute ${\tt gcd}(0, 5)$, ${\tt gcd}(4, 12)$, and ${\tt gcd}(93, 399)$.  The answer should be $5$, $4$, and $3$, respectively

**解答セル/Answer Cell**
<!--- code w label=prob kernel=python points=1 --->
<!--- end code --->

<!--- md label=ans --->
Go
<!--- end md --->

<!--- code w label=ans kernel=go --->
<!--- exec-include ./mk_version.py -D label="Test GCD" nb/source/pl01_basics/include/pl01.go --->
<!--- end code --->

<!--- md label=ans --->
Julia
<!--- end md --->

<!--- code w label=ans kernel=jl --->
<!--- exec-include ./mk_version.py -D label="Test GCD" nb/source/pl01_basics/include/pl01.jl --->
<!--- end code --->

<!--- md label=ans --->
OCaml
<!--- end md --->

<!--- code w label=ans kernel=ml --->
<!--- exec-include ./mk_version.py -D label="Test GCD" nb/source/pl01_basics/include/pl01.ml --->
Printf.printf "%d" (gcd 0 5);;
Printf.printf "%d" (gcd 4 12);;
Printf.printf "%d" (gcd 93 399);;
<!--- end code --->

<!--- md label=ans --->
Rust
<!--- end md --->

<!--- code w label=ans kernel=rs --->
<!--- exec-include ./mk_version.py -D label="Test GCD" nb/source/pl01_basics/include/pl01.rs --->
println!(gcd(0, 5))
println!(gcd(4, 12))
println!(gcd(93, 399))
<!--- end code --->

# Iterations (while, for, etc.)

* Iteration is another fundamental control flow along with conditional statement

<!--- code w kernel=python --->
# uncomment the line you want to execute
# I("Iterations (while, for, etc.)") # Introduction
# C("Iterations (while, for, etc.)") # Coding problem
<!--- end code --->

#*P 

* In the language you chose, write a function `sum_of_square` that takes an integer $n$ and returns $1^2 + 2^2 + \cdots + n^2$
* To calculate this number with a loop construct (e.g., for or while), you need a _mutable_ variable (a variable that can be updated)
* Some languages, such as OCaml and Rust, have their idiosyncrasies for introducing mutable variables

**解答セル/Answer Cell**
<!--- code w label=prob kernel=python points=1 --->
<!--- end code --->

<!--- md label=ans --->
Go
<!--- end md --->

<!--- code w label=ans kernel=go --->
<!--- exec-include ./mk_version.py -D label="Sum of square" nb/source/pl01_basics/include/pl01.go --->
<!--- end code --->

<!--- md label=ans --->
Julia
<!--- end md --->

<!--- code w label=ans kernel=jl --->
<!--- exec-include ./mk_version.py -D label="Sum of square" nb/source/pl01_basics/include/pl01.jl --->
<!--- end code --->

<!--- md label=ans --->
OCaml
<!--- end md --->

<!--- code w label=ans kernel=ml --->
<!--- exec-include ./mk_version.py -D label="Sum of square" nb/source/pl01_basics/include/pl01.ml --->
<!--- end code --->

<!--- md label=ans --->
Rust
<!--- end md --->

<!--- code w label=ans kernel=rs --->
<!--- exec-include ./mk_version.py -D label="Sum of square" nb/source/pl01_basics/include/pl01.rs --->
<!--- end code --->

and compute ${\tt sum\_of\_square}(0)$, ${\tt sum\_of\_square}(3)$, and ${\tt sum\_of\_square}(10)$.The answer should be $0$, $14$, and $385$, respectively

**解答セル/Answer Cell**
<!--- code w label=prob kernel=python points=1 --->
<!--- end code --->

<!--- md label=ans --->
Go
<!--- end md --->

<!--- code w label=ans kernel=go --->
<!--- exec-include ./mk_version.py -D label="Test sum of square" nb/source/pl01_basics/include/pl01.go --->
<!--- end code --->

<!--- md label=ans --->
Julia
<!--- end md --->

<!--- code w label=ans kernel=jl --->
<!--- exec-include ./mk_version.py -D label="Test sum of square" nb/source/pl01_basics/include/pl01.jl --->
<!--- end code --->

<!--- md label=ans --->
OCaml
<!--- end md --->

<!--- code w label=ans kernel=ml --->
<!--- exec-include ./mk_version.py -D label="Test sum of square" nb/source/pl01_basics/include/pl01.ml --->
<!--- end code --->

<!--- md label=ans --->
Rust
<!--- end md --->

<!--- code w label=ans kernel=rs --->
<!--- exec-include ./mk_version.py -D label="Test sum of square" nb/source/pl01_basics/include/pl01.rs --->
<!--- end code --->

# Builtin Data Types

* Most programming languages have builtin data types similar to strings, arrays, lists, tuples, and dictionaries (mapping)
* While they are heavily used in real programs, we don't get into them with the interest in time
* Ask AI to learn the basics and solve exercise problems on the following topics as needed
  * Strings
  * Lists
  * Arrays and vectors
  * Dictionary or Map

<!--- code w kernel=python --->
# change the topic name and uncomment the line you want to execute
# I("arrays") # Introduction
# C("arrays") # Coding problem
<!--- end code --->

# Defining data types

* In programming languages, _a type_ generally means a set of values having the same or similar properties or applicable operations
* Basic examples are integers, floating point numbers, strings, etc.

* Programming languages allow you to define a new type built from existing types
* e.g., define a complex number as a pair of real numbers (real and imaginary part)

* Different languages have different names/mechanisms to compose a new type from existing types
  * C : struct
  * C++ : struct/class
  * Python : class
  * Go : struct
  * Julia : struct
  * OCaml : variant, record, and object (class)
  * Rust : struct

* Consider asking AI
<!--- code w kernel=python --->
# uncomment the line you want to execute
# I("struct")  # Introduction (Go, Julia, and Rust)
# I("variant") # Introduction (OCaml)
# C("struct")  # Coding problem (Go, Julia, and Rust)
# C("variant") # Coding problem (OCaml)
<!--- end code --->

#*P 

* Learn how to define a new composite type in the language you chose;
* define a new type representing a person (named `person` or `Person` depending on the naming constraint/convention of the language), which consists of the name (string) and the date of birth (string);

**解答セル/Answer Cell**
<!--- code w label=prob kernel=python points=1 --->
<!--- end code --->

<!--- md label=ans --->
Go
<!--- end md --->

<!--- code w label=ans kernel=go --->
<!--- exec-include ./mk_version.py -D label="A data type" nb/source/pl01_basics/include/pl01.go --->
<!--- end code --->

<!--- md label=ans --->
Julia
<!--- end md --->

<!--- code w label=ans kernel=jl --->
<!--- exec-include ./mk_version.py -D label="A data type" nb/source/pl01_basics/include/pl01.jl --->
<!--- end code --->

<!--- md label=ans --->
OCaml
<!--- end md --->

<!--- code w label=ans kernel=ml --->
<!--- exec-include ./mk_version.py -D label="A data type" nb/source/pl01_basics/include/pl01.ml --->
<!--- end code --->

<!--- md label=ans --->
Rust
<!--- end md --->

<!--- code w label=ans kernel=rs --->
<!--- exec-include ./mk_version.py -D label="A data type" nb/source/pl01_basics/include/pl01.rs --->
<!--- end code --->

* define a function called `person_name` that takes a person and returns his/her name;
* create a person whose name is "Masakazu Mimura" (date of birth = 1967/6/8) and apply `person_name` to it

**解答セル/Answer Cell**
<!--- code w label=prob kernel=python points=1 --->
<!--- end code --->

<!--- md label=ans --->
Go
<!--- end md --->

<!--- code w label=ans kernel=go --->
<!--- exec-include ./mk_version.py -D label="Person name" nb/source/pl01_basics/include/pl01.go --->
<!--- end code --->

<!--- md label=ans --->
Julia
<!--- end md --->

<!--- code w label=ans kernel=jl --->
<!--- exec-include ./mk_version.py -D label="Person name" nb/source/pl01_basics/include/pl01.jl --->
<!--- end code --->

<!--- md label=ans --->
OCaml
<!--- end md --->

<!--- code w label=ans kernel=ml --->
<!--- exec-include ./mk_version.py -D label="Person name" nb/source/pl01_basics/include/pl01.ml --->
<!--- end code --->

<!--- md label=ans --->
Rust
<!--- end md --->

<!--- code w label=ans kernel=rs --->
<!--- exec-include ./mk_version.py -D label="Person name" nb/source/pl01_basics/include/pl01.rs --->
<!--- end code --->

# Recursive types

* Just as a function can be recursive, so can a type
* A recursive type is a type one of whose component has the same type as itself
* It is the basis for defining data structures that can grow arbitrarily large, such as trees, lists, and graphs

* Consider asking AI
<!--- code w kernel=python --->
# uncomment the line you want to execute
# I("defining recursive types")
# C("defining recursive types")
<!--- end code --->

#*P 

* Define a type that represents a binary tree
* More specifically, a binary tree is either
  * empty,
  * or a node having two children each of which is a binary tree (note that each child may be empty)
* We define _the number of nodes_ of a binary tree as follows
  * the number of nodes of an empty tree is zero
  * the number of nodes of a non-empty tree is (1 + the number of nodes of left child + the number of nodes of the right child)

**解答セル/Answer Cell**
<!--- code w label=prob kernel=python points=1 --->
<!--- end code --->

<!--- md label=ans --->
Go
<!--- end md --->

<!--- code w label=ans kernel=go --->
<!--- exec-include ./mk_version.py -D label="bintree" nb/source/pl01_basics/include/pl01.go --->
<!--- end code --->

<!--- md label=ans --->
Julia
<!--- end md --->

<!--- code w label=ans kernel=jl --->
<!--- exec-include ./mk_version.py -D label="bintree" nb/source/pl01_basics/include/pl01.jl --->
<!--- end code --->

<!--- md label=ans --->
OCaml
<!--- end md --->

<!--- code w label=ans kernel=ml --->
<!--- exec-include ./mk_version.py -D label="bintree" nb/source/pl01_basics/include/pl01.ml --->
<!--- end code --->

<!--- md label=ans --->
Rust
<!--- end md --->

<!--- code w label=ans kernel=rs --->
<!--- exec-include ./mk_version.py -D label="bintree" nb/source/pl01_basics/include/pl01.rs --->
<!--- end code --->

#*P 

* Define a function `mk_tree` that takes an integer $n$ and returns the "maximally balanced binary tree" that has exactly $n$ nodes
* A binary tree $t$ is maximally balanced when:
  * $t$ is empty, or
  * $t$ is non-empty and satisfies the following two conditions
    1. $t$'s left child has exactly the same as or just one more nodes than $t$'s right child
    1. each child is also maximally balanced
* Given $n$, the maximally balanced binary tree of $n$ nodes is uniquely determined

**解答セル/Answer Cell**
<!--- code w label=prob kernel=python points=1 --->
<!--- end code --->

<!--- md label=ans --->
Go
<!--- end md --->

<!--- code w label=ans kernel=go --->
<!--- exec-include ./mk_version.py -D label="mk_tree" nb/source/pl01_basics/include/pl01.go --->
<!--- end code --->

<!--- md label=ans --->
Julia
<!--- end md --->

<!--- code w label=ans kernel=jl --->
<!--- exec-include ./mk_version.py -D label="mk_tree" nb/source/pl01_basics/include/pl01.jl --->
<!--- end code --->

<!--- md label=ans --->
OCaml
<!--- end md --->

<!--- code w label=ans kernel=ml --->
<!--- exec-include ./mk_version.py -D label="mk_tree" nb/source/pl01_basics/include/pl01.ml --->
<!--- end code --->

<!--- md label=ans --->
Rust
<!--- end md --->

<!--- code w label=ans kernel=rs --->
<!--- exec-include ./mk_version.py -D label="mk_tree" nb/source/pl01_basics/include/pl01.rs --->
<!--- end code --->

#*P 

* Define a function `count_nodes` that takes a binary tree and returns the number of nodes of it

**解答セル/Answer Cell**
<!--- code w label=prob kernel=python points=1 --->
<!--- end code --->

<!--- md label=ans --->
Go
<!--- end md --->

<!--- code w label=ans kernel=go --->
<!--- exec-include ./mk_version.py -D label="count_nodes" nb/source/pl01_basics/include/pl01.go --->
<!--- end code --->

<!--- md label=ans --->
Julia
<!--- end md --->

<!--- code w label=ans kernel=jl --->
<!--- exec-include ./mk_version.py -D label="count_nodes" nb/source/pl01_basics/include/pl01.jl --->
<!--- end code --->

<!--- md label=ans --->
OCaml
<!--- end md --->

<!--- code w label=ans kernel=ml --->
<!--- exec-include ./mk_version.py -D label="count_nodes" nb/source/pl01_basics/include/pl01.ml --->
<!--- end code --->

<!--- md label=ans --->
Rust
<!--- end md --->

<!--- code w label=ans kernel=rs --->
<!--- exec-include ./mk_version.py -D label="count_nodes" nb/source/pl01_basics/include/pl01.rs --->
<!--- end code --->

#*P 

* Obviously, for $t = {\tt mk\_tree}(n)$, ${\tt count\_nodes}(t)$ should return $n$
* Confirm this for meaningfully large $n$ (e.g., 1000)

**解答セル/Answer Cell**
<!--- code w label=prob kernel=python points=1 --->
<!--- end code --->

<!--- md label=ans --->
Go
<!--- end md --->

<!--- code w label=ans kernel=go --->
<!--- exec-include ./mk_version.py -D label="1000 nodes" nb/source/pl01_basics/include/pl01.go --->
<!--- end code --->

<!--- md label=ans --->
Julia
<!--- end md --->

<!--- code w label=ans kernel=jl --->
<!--- exec-include ./mk_version.py -D label="1000 nodes" nb/source/pl01_basics/include/pl01.jl --->
<!--- end code --->

<!--- md label=ans --->
OCaml
<!--- end md --->

<!--- code w label=ans kernel=ml --->
<!--- exec-include ./mk_version.py -D label="1000 nodes" nb/source/pl01_basics/include/pl01.ml --->
<!--- end code --->

<!--- md label=ans --->
Rust
<!--- end md --->

<!--- code w label=ans kernel=rs --->
<!--- exec-include ./mk_version.py -D label="1000 nodes" nb/source/pl01_basics/include/pl01.rs --->
<!--- end code --->


